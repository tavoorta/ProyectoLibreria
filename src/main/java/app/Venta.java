package app;

import static app.Conexion.getConnection;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.sql.Timestamp;
import java.text.SimpleDateFormat;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.table.DefaultTableModel;
import javax.swing.text.AbstractDocument;
import javax.swing.text.AttributeSet;
import javax.swing.text.BadLocationException;
import javax.swing.text.DocumentFilter;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
/**
 *
 * @author ggaro
 */
public class Venta extends javax.swing.JFrame {

    /**
     * Creates new form Venta
     */
    public Venta() {
        initComponents();
        cargarTabla();
        limiteInput(txtCodigoLibroVenta, 10);
        limiteInput(txtCedulaClienteVenta, 10);
        limiteInput(txtCantidadCompra, 10);
        limiteInput(txtBuscarVenta, 10);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        txtCedulaClienteVenta = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        txtCodigoLibroVenta = new javax.swing.JTextField();
        jScrollPane3 = new javax.swing.JScrollPane();
        TableListVenta = new javax.swing.JTable();
        btnBuscarVentaId = new javax.swing.JButton();
        txtBuscarVenta = new javax.swing.JTextField();
        btnGuardarVenta = new javax.swing.JButton();
        btnBuscarVentas = new javax.swing.JButton();
        btnClearTableVenta = new javax.swing.JButton();
        txtCantidadCompra = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        btnInicio = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Libreria Tres Gatos");

        jLabel5.setText("VENTAS");

        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel6.setText("Ingrese la Cedula del Cliente");

        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel7.setText("Ingresar el Código del Libro");

        TableListVenta.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Nombre", "Apellido", "Cedula", "Libro", "Código", "Fecha Venta"
            }
        ));
        jScrollPane3.setViewportView(TableListVenta);

        btnBuscarVentaId.setText("Buscar por Cliente");
        btnBuscarVentaId.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarVentaIdActionPerformed(evt);
            }
        });

        btnGuardarVenta.setText("Registrar Venta");
        btnGuardarVenta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGuardarVentaActionPerformed(evt);
            }
        });

        btnBuscarVentas.setText("Mostrar Ventas");
        btnBuscarVentas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarVentasActionPerformed(evt);
            }
        });

        btnClearTableVenta.setText("Limpiar Busqueda");
        btnClearTableVenta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearTableVentaActionPerformed(evt);
            }
        });

        jLabel8.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel8.setText("Cantidad");

        btnInicio.setText("INICIO");
        btnInicio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnInicioActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(btnInicio))
                                .addGap(205, 205, 205)
                                .addComponent(btnBuscarVentaId, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(txtBuscarVenta, javax.swing.GroupLayout.DEFAULT_SIZE, 214, Short.MAX_VALUE))
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, 173, Short.MAX_VALUE)
                                    .addComponent(txtCedulaClienteVenta))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(txtCodigoLibroVenta)
                                    .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, 173, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtCantidadCompra)
                                    .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(btnGuardarVenta, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(336, 336, 336)
                        .addComponent(btnBuscarVentas, javax.swing.GroupLayout.DEFAULT_SIZE, 139, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addComponent(btnClearTableVenta, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnBuscarVentaId)
                            .addComponent(txtBuscarVenta, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(42, 42, 42)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnClearTableVenta)
                            .addComponent(btnBuscarVentas)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnInicio)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 22, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(jLabel7)
                    .addComponent(jLabel8))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtCedulaClienteVenta, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnGuardarVenta)
                    .addComponent(txtCodigoLibroVenta, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtCantidadCompra, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnBuscarVentaIdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarVentaIdActionPerformed
        String libro = txtBuscarVenta.getText();
        buscarLibro(libro);
        txtBuscarVenta.setText("");
    }//GEN-LAST:event_btnBuscarVentaIdActionPerformed

    private void btnGuardarVentaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGuardarVentaActionPerformed

        String codigo = txtCodigoLibroVenta.getText();
        String cedulaCliente = txtCedulaClienteVenta.getText();
        String cantidad = txtCantidadCompra.getText();
        if (codigo.isEmpty() || cantidad.isEmpty() || cedulaCliente.isEmpty()) {
            JOptionPane.showMessageDialog(null, "Por favor, complete todos los campos.");
        }
        
        int codigoLibro = Integer.parseInt(codigo);
        int cantidadCompra = Integer.parseInt(cantidad);
        Connection conect;
        PreparedStatement psVenta;
        PreparedStatement psActualizarCantidad;
        PreparedStatement psActualizarLibrosComprados;

        try {
            conect = getConnection();
            conect.setAutoCommit(false); // Iniciar transacción

            // Insertar venta
            String sqlVenta = "INSERT INTO venta (cedula, codigo, fechaVenta) VALUES (?, ?, NOW())";
            psVenta = conect.prepareStatement(sqlVenta);
            psVenta.setString(1, cedulaCliente);
            psVenta.setInt(2, codigoLibro);
            psVenta.executeUpdate();

            // Actualizar cantidad de libro
            String sqlActualizarCantidad = "UPDATE libro SET cantidad = cantidad - ? WHERE codigo = ?";
            psActualizarCantidad = conect.prepareStatement(sqlActualizarCantidad);
            psActualizarCantidad.setInt(1, cantidadCompra);
            psActualizarCantidad.setInt(2, codigoLibro);
            psActualizarCantidad.executeUpdate();

            // Actualizar libros comprados por el cliente
            String sqlActualizarLibrosComprados = "UPDATE cliente SET librosComprados = librosComprados + ? WHERE cedula = ?";
            psActualizarLibrosComprados = conect.prepareStatement(sqlActualizarLibrosComprados);
            psActualizarLibrosComprados.setInt(1, cantidadCompra);
            psActualizarLibrosComprados.setString(2, cedulaCliente);
            psActualizarLibrosComprados.executeUpdate();

            conect.commit(); // Confirmar transacción
            JOptionPane.showMessageDialog(null, "Venta registrada y cantidad de libro actualizada.");
            limpiar();
            cargarTabla();

        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, ex.toString());
        }
    }//GEN-LAST:event_btnGuardarVentaActionPerformed

    private void btnBuscarVentasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarVentasActionPerformed
        cargarTabla();
    }//GEN-LAST:event_btnBuscarVentasActionPerformed

    private void btnClearTableVentaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearTableVentaActionPerformed
        DefaultTableModel model = (DefaultTableModel) TableListVenta.getModel();
        model.setRowCount(0);
    }//GEN-LAST:event_btnClearTableVentaActionPerformed

    private void btnInicioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnInicioActionPerformed
        Inicio inicio = new Inicio();
        inicio.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_btnInicioActionPerformed

    private void buscarLibro(String cedulaBusqueda) {

        if (cedulaBusqueda.isEmpty()) {
            JOptionPane.showMessageDialog(null, "Por favor, introduzca la cédula del cliente.");
            return;
        }

        DefaultTableModel modeloTabla = (DefaultTableModel) TableListVenta.getModel();
        modeloTabla.setRowCount(0);
        PreparedStatement ps;
        ResultSet rs;
        ResultSetMetaData rsmd;
        int columnas;

        // Ajuste de ancho de columnas
        int[] anchos = {10, 10, 10, 50, 10, 50};
        for (int i = 0; i < TableListVenta.getColumnCount(); i++) {
            TableListVenta.getColumnModel().getColumn(i).setPreferredWidth(anchos[i]);
        }

        String sql = "SELECT c.nombre, c.apellido, c.cedula, l.nombre AS libro, l.codigo, v.fechaVenta "
                + "FROM venta v "
                + "JOIN cliente c ON v.cedula = c.cedula "
                + "JOIN libro l ON v.codigo = l.codigo";

        if (!cedulaBusqueda.isEmpty()) {
            sql += " WHERE c.cedula LIKE ?";
        }

        try {
            Connection conect = getConnection();
            ps = conect.prepareStatement(sql);

            if (!cedulaBusqueda.isEmpty()) {
                String criterio = "%" + cedulaBusqueda + "%";
                ps.setString(1, criterio);
            }

            rs = ps.executeQuery();
            rsmd = rs.getMetaData();
            columnas = rsmd.getColumnCount();

            SimpleDateFormat formatoFecha = new SimpleDateFormat("dd/MM/yyyy");

            while (rs.next()) {
                Object[] fila = new Object[columnas];
                for (int i = 0; i < columnas; i++) {
                    if (i == 5) {
                        Timestamp timestamp = rs.getTimestamp(i + 1);
                        String fechaFormateada = formatoFecha.format(timestamp);
                        fila[i] = fechaFormateada;
                    } else {
                        fila[i] = rs.getObject(i + 1);
                    }
                }
                modeloTabla.addRow(fila);
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, ex.toString());
        }
    }

    private void cargarTabla() {

        DefaultTableModel modeloTabla = (DefaultTableModel) TableListVenta.getModel();
        modeloTabla.setRowCount(0);
        PreparedStatement ps;
        ResultSet rs;
        ResultSetMetaData rsmd;
        int columnas;

        // Ajuste del tamaño de las columnas
        int[] anchos = {10, 10, 10, 50, 10, 50};
        for (int i = 0; i < TableListVenta.getColumnCount(); i++) {
            TableListVenta.getColumnModel().getColumn(i).setPreferredWidth(anchos[i]);
        }

        String sql = "SELECT c.nombre, c.apellido, c.cedula, l.nombre AS libro, l.codigo, v.fechaVenta "
                + "FROM venta v "
                + "JOIN cliente c ON v.cedula = c.cedula "
                + "JOIN libro l ON v.codigo = l.codigo";

        try {
            Connection conect = getConnection();
            ps = conect.prepareStatement(sql);
            rs = ps.executeQuery();
            rsmd = rs.getMetaData();
            columnas = rsmd.getColumnCount();

            SimpleDateFormat formatoFecha = new SimpleDateFormat("dd/MM/yyyy");

            while (rs.next()) {
                Object[] fila = new Object[columnas];
                for (int i = 0; i < columnas; i++) {
                    if (i == 5) {
                        Timestamp timestamp = rs.getTimestamp(i + 1);
                        String fechaFormateada = formatoFecha.format(timestamp);
                        fila[i] = fechaFormateada;
                    } else {
                        fila[i] = rs.getObject(i + 1);
                    }
                }
                modeloTabla.addRow(fila);
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, ex.toString());
        }
    }

    private void limiteInput(JTextField textField, int maxCharacters) {
        ((AbstractDocument) textField.getDocument()).setDocumentFilter(new DocumentFilter() {
            @Override
            public void replace(DocumentFilter.FilterBypass fb, int offset, int length, String text, AttributeSet attrs) throws BadLocationException {
                int currentLength = fb.getDocument().getLength();
                int remainingCharacters = maxCharacters - currentLength + length;

                if (remainingCharacters > 0) {
                    if (length <= remainingCharacters) {
                        super.replace(fb, offset, length, text, attrs);
                    } else {
                        String newStr = text.substring(0, remainingCharacters);
                        super.replace(fb, offset, length, newStr, attrs);
                    }
                }
            }
        });
    }

    private void limpiar() {
        txtCedulaClienteVenta.setText("");
        txtCodigoLibroVenta.setText("");
        txtCantidadCompra.setText("");
        txtBuscarVenta.setText("");
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Venta.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Venta.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Venta.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Venta.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Venta().setVisible(true);
            }
        });
    }
// <editor-fold defaultstate="collapsed" desc="Variables declaration - do not modify">
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable TableListVenta;
    private javax.swing.JButton btnBuscarVentaId;
    private javax.swing.JButton btnBuscarVentas;
    private javax.swing.JButton btnClearTableVenta;
    private javax.swing.JButton btnGuardarVenta;
    private javax.swing.JButton btnInicio;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTextField txtBuscarVenta;
    private javax.swing.JTextField txtCantidadCompra;
    private javax.swing.JTextField txtCedulaClienteVenta;
    private javax.swing.JTextField txtCodigoLibroVenta;
    // End of variables declaration//GEN-END:variables
// </editor-fold>
}
